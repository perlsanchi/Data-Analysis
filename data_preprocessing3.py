# -*- coding: utf-8 -*-
"""Data preprocessing3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/193wFtrZ8FxI0mIjbny070czLdJpotBs7
"""

#Imputations:
#import libraries

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import warnings
warnings.filterwarnings("ignore")
import plotly as px

data = pd.read_csv("/content/IT_SALARY_Preprocessed2 - Excel analysis.csv")

data.info()

data.isnull().sum()

data["Bonus_Stocks_inclusion"] = data["Bonus_Stocks_inclusion"].fillna(0)

data.isnull().sum()

data["Bonus_Stocks_1yr_ago"] = data["Bonus_Stocks_1yr_ago"].fillna(0)

data.isnull().sum()

#Tried to handle critical data with excel analysis. Now for vast missing value i will use imputations:
#we can replace with most frequent value or by creating a separate feature.
#let us try with most frequent value:
#Since we don't have mean, median here we can replace it with mode value (the most frequent value) if 5% data is missing.
#Second technique we can use - Missing category imputations. if most of the values are missing like 10% then replacing with mode is 
#not a good idea so i will create a separate missing feature.

#1226 5% is 61.3 and 1226 10% is 122.6, so i will use the second technique.

data.isnull().mean()*100

data["Main Technology"].value_counts().sort_values(ascending=False).plot.bar()
plt.xlabel("Main Technology")
plt.ylabel("Technologies")

#Python is most widely used. But in competition with Python we also have Javascript with very less difference:
data["Main Technology"].mode()

fig = plt.figure()
ax = fig.add_subplot(111)
data[data["Main Technology"] == 'Python']['Experience'].plot(kind = 'kde', ax=ax)
data[data["Main Technology"].isnull()]['Experience'].plot(kind = 'kde', ax=ax, color = 'red')
lines, labels = ax.get_legend_handles_labels()
labels = ["Python","Null values"]
ax.legend(lines, labels, loc = 'best')
plt.title("Main Technology")

data["Main Technology"].fillna("Missing_Values", inplace = True)
data["Main Technology"].value_counts().sort_values(ascending=False).plot.bar()
plt.xlabel("Main Technology")
plt.ylabel("Technologies")

data.isnull().sum()

fig = plt.figure()
ax = fig.add_subplot(111)
data[data["Main Technology"] == 'Python']['Experience'].plot(kind = 'kde', ax=ax)
data[data["Main Technology"] == 'Missing_Values']['Experience'].plot(kind = 'kde', ax=ax, color = 'red')
lines, labels = ax.get_legend_handles_labels()
labels = ["Python","Null values"]
ax.legend(lines, labels, loc = 'best')
plt.title("Main Technology")

data.isnull().sum()

data['Main_Tech_2'].mode()

data["Main_Tech_2"].value_counts().sort_values(ascending=False).plot.bar()
plt.xlabel("Main_Tech_2")
plt.ylabel("Technologies")

data['Main_Tech_2'].fillna("SQL", inplace  =True)

data.isnull().sum()

data['Seniority level'].value_counts()

for col in data.columns:
  print(data[col].value_counts(),"\n")

data["Seniority level"] =  data["Seniority level"].replace(['student','Student','intern','Intern'],'WorkingStudent')

print(data["Seniority level"].value_counts())

data["Seniority level"] =  data["Seniority level"].replace(['Nolevel','C-Level','Key','selfemployed','EntryLevel'],'WorkingStudent')
print(data["Seniority level"].value_counts())

data.tail(2)

#Let us seperate this into numerical and categorical:

numerical = data.select_dtypes(exclude = 'object')
categorical = data.select_dtypes(include = 'object')
numerical

#Let us explore the numerical columns first:
numerical["Salary"].mean()

numerical.query("Salary > 500000")

data.iloc[694]

data.iloc[694]

#This data seems to be irrelevant:
index = data[data.Bonus_Stocks_1yr_ago == '50000000.0']

data.drop(data.index[[694]], inplace = True)

data

data.query("Salary > 500000")

numerical.columns

data.query("Bonus_Stocks_inclusion > 500000")

numerical.query("Bonus_Stocks_inclusion > 500000")

data.drop(data.index[[234]], inplace = True)

data.query("Bonus_Stocks_inclusion > 500000")

numerical.columns

data.query("Salary_1yr_ago > 500000")

numerical.query("Salary_1yr_ago > 500000")

numerical.query("Bonus_Stocks_1yr_ago > 500000")

data.query("Bonus_Stocks_1yr_ago > 500000")

data.drop(data.index[[346]], inplace = True)

data.query("Bonus_Stocks_1yr_ago >= 500000")

numerical.query("Age < 22")

#let us remove these outliers:

data.drop(data.index[[1]], inplace = True)

data.query("Age < 22")

data.drop(data.index[[571]], inplace = True)

data.query("Age == 6")

categorical.columns

sns.countplot(x = 'Gender', data = data)

sns.countplot(x = 'Gender',hue = 'Job_lost_covid', data = data)

sns.countplot(x = 'Gender',hue = 'Vacations', data = data)

numerical.head(2)

categorical.head(2)

#It is time to ask questions to our preprocessed data:
#Question 1: Let us find out the age for particular salaries:
data.groupby('Age')['Salary'].count().plot(kind = 'bar')

data.query("Age == 30")["Salary"]

numerical.head(1)

categorical.head(1)

#Find out salaries of different department.
print(data.groupby('Seniority level')['Salary'].mean(), "\n")

data["Seniority level"][data["Seniority level"]=='Director']

data.groupby("Main_Tech_2").mean()

#Let us find out average salary and age of all the employees from there city.
data.groupby(['City', 'Gender'])[['Salary', 'Age']].mean().reset_index()

func = data.groupby('Main_Tech_2')
func.describe()

func1 =  data.groupby('Main Technology')
func1.describe()

#Let us check salary of different employement types.
data.groupby('Employment status')['Salary'].mean().plot()

#Let us check male or female who lost most of there jobs during covid.
sns.displot(x = 'Gender', kde = True, bins = 5, hue = data["Job_lost_covid"],data=data)

import plotly.express as px
fig = px.box(data, y="Age")
fig.show()

#Checking for outliers:
numerical.columns

import plotly.express as px
fig = px.box(data, y="Age")
fig.show()

data.query("Age > 46")

import plotly.express as px
fig = px.box(data, y="Experience")
fig.show()

import plotly.express as px
fig = px.box(data, y="Years of experience in Germany")
fig.show()

#Till here it seems to be True outliers and i don't find any reason to remove them.
import plotly.express as px
fig = px.box(data, y="Salary")
fig.show()

#500M in salary is the only outlier and to remove that i will used IQR Based Filtering.
#Find IQR:
percentile25 = data['Salary'].quantile(0.25)
percentile75 = data['Salary'].quantile(0.75)
IQR = percentile75 - percentile25
print("Percentile 25 :",percentile25)
print("Percentile 75 :",percentile75)
upper_limit = percentile75 + 1.5 * IQR
lower_limit = percentile25 - 1.5 * IQR
print("********************************************************")
print("Upper Limit",upper_limit)
print("Lower Limit",lower_limit)

#Checking for exact outliers:
data[data['Salary'] > upper_limit]
data[data['Salary'] < lower_limit]

data = data[data['Salary'] < upper_limit]
data.shape

#Checking for exact outliers:
data[data['Salary'] > upper_limit]
data[data['Salary'] < lower_limit]

data = data[data['Salary'] > lower_limit]
data.shape

#Checking for exact outliers:
data[data['Salary'] > upper_limit]
data[data['Salary'] < lower_limit]

import plotly.express as px
fig = px.box(data, y="Salary")
fig.show()

'''Bonus_Stocks_inclusion', 'Salary_1yr_ago', 'Bonus_Stocks_1yr_ago',
       'Company size', 'Shorter_working_week'],'''
for col in numerical.columns:
  percentile25 = data[col].quantile(0.25)
  percentile75 = data[col].quantile(0.75)
  IQR = percentile75 - percentile25
  print("Traversing", col)
  print("Percentile 25 :",percentile25)
  print("Percentile 75 :",percentile75)
  upper_limit = percentile75 + 1.5 * IQR
  lower_limit = percentile25 - 1.5 * IQR
  print("Upper Limit",upper_limit)
  print("Lower Limit",lower_limit)
  print("********************************************************")

for col in numerical.columns:
  print("Traversing in:",col)
  print(data[data[col] > upper_limit])
  print(data[data[col] < lower_limit])



data.head(2)



import plotly.express as px
fig = px.box(data, y="Bonus_Stocks_inclusion")
fig.show()

data[data['Bonus_Stocks_inclusion'] > 200000]

data = data[data['Bonus_Stocks_inclusion'] < 200000]

data[data['Bonus_Stocks_inclusion'] > 200000]

data.head()

import plotly.express as px
fig = px.box(data, y="Bonus_Stocks_inclusion")
fig.show()

import plotly.express as px
fig = px.box(data, y="Salary_1yr_ago")
fig.show()

data[data['Salary_1yr_ago'] > 140000]

data = data[data['Salary_1yr_ago'] < 140000]

data[data['Salary_1yr_ago'] > 140000]

import plotly.express as px
fig = px.box(data, y="Salary_1yr_ago")
fig.show()

import plotly.express as px
fig = px.box(data, y="Bonus_Stocks_1yr_ago")
fig.show()

data[data['Bonus_Stocks_1yr_ago'] > 200000]

#Statistical Modelling:
import scipy.stats as stats
z_scores = stats.zscore(numerical)
z_scores

plt.figure(figsize = (20,10))
sns.boxplot(data=data)

data.isnull().sum()

data.head()

data.shape[0]

data.to_csv('IT_SALARY_ready.csv', header=True, index=True)